
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check admin role
    // Assumes user documents in /users/{userId} have a 'role' field.
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection:
    match /users/{userId} {
      // Admins can read/update any user. Users can read/update their own profile.
      allow read, update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      // Authenticated users can create their own profile document (e.g., during signup).
      // Client-side logic should ensure the {userId} in the path matches request.auth.uid.
      allow create: if request.auth != null;
      // Only admins can list all users.
      allow list: if isAdmin();
    }

    // Appointments collection:
    match /appointments/{appointmentId} {
      // Patients can create appointments for themselves. Admins can also create appointments.
      allow create: if request.auth != null && (request.resource.data.patientId == request.auth.uid || isAdmin());
      // Patients can read/update their own appointments. Admins can read/update any appointment.
      allow read, update: if request.auth != null && (resource.data.patientId == request.auth.uid || isAdmin());
      
      // Patients can list their own appointments if the query filters by their patientId.
      // Admins can list all appointments.
      // This rule expects that a patient's query for appointments includes a 'where("patientId", "==", request.auth.uid)' clause,
      // and that this is the first 'where' clause if there are multiple 'where' conditions in the query.
      allow list: if request.auth != null &&
                     (
                       (request.query.filters.size() > 0 && request.query.filters[0][0] == 'patientId' && request.query.filters[0][2] == request.auth.uid) ||
                       isAdmin()
                     );
    }

    // Doctors collection:
    match /doctors/{doctorId} {
      // Any authenticated user can read doctor information and list all doctors.
      allow read, list: if request.auth != null;
      // Only admins can create, update, or delete doctor information.
      allow create, update, delete: if isAdmin();
    }

    // --- Your Original Default Deny Rule ---
    // This rule ensures that any path not explicitly matched above is denied.
    // It's crucial for security if other collections are added without specific rules.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
