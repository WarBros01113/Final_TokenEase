
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check user role
    function hasRole(role) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isAdmin() {
      return hasRole('admin');
    }

    function isPatient() {
      return hasRole('patient');
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Helper function to check specific query filters for listing appointments
    function isPatientListingOwnAppointments() {
      return request.query.keys().hasAll(['patientId', 'orderBy', 'limit']) &&
             request.query.filters[0][0] == 'patientId' &&
             request.query.filters[0][2] == request.auth.uid &&
             request.query.limit <= 100; // Limit patient's own appointment listing
    }

    function isCheckingSlotAvailability() {
      // Allows query if it filters by doctorId AND date, and has a specific limit.
      // Assumes client query sends exactly these two where clauses and limit(300).
      return request.query.keys().hasAll(['doctorId', 'date', 'limit']) &&
             request.query.limit == 300 && // Ensure the limit is exactly as expected for this query type
             request.query.filters.size() == 2 && // Expecting exactly two 'where' clauses
             (
               (request.query.filters[0][0] == 'doctorId' && request.query.filters[1][0] == 'date') ||
               (request.query.filters[0][0] == 'date' && request.query.filters[1][0] == 'doctorId')
             );
    }


    // Users collection:
    match /users/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId); // Allows user to create their own doc during signup
      allow list: if isAdmin();
      allow delete: if isAdmin();
    }

    // User Settings collection:
    match /userSettings/{settingsDocId} {
      allow read, update, create: if request.auth != null && (settingsDocId == ("userPrefs_" + request.auth.uid) || isAdmin());
      allow delete: if isAdmin();
    }

    // Appointments collection:
    match /appointments/{appointmentId} {
      allow create: if (isPatient() && request.resource.data.patientId == request.auth.uid) || isAdmin();
      
      // Patients can read their own appointments, admins can read any.
      // This rule is critical for the slot availability check if client reads individual appointment docs after listing.
      allow read: if request.auth != null; // Simpler rule: if user is authenticated they can read. Security relies on list rules.
                                         // More restrictive: if (resource.data.patientId == request.auth.uid) || isAdmin();

      allow update: if (isPatient() && resource.data.patientId == request.auth.uid) || isAdmin();
      
      allow list: if request.auth != null && (
                       isPatientListingOwnAppointments() ||
                       isCheckingSlotAvailability() ||
                       isAdmin()
                     );
      
      allow delete: if (isPatient() && resource.data.patientId == request.auth.uid && (resource.data.status == 'upcoming' || resource.data.status == 'active')) || isAdmin();
    }

    // Doctors collection:
    match /doctors/{doctorId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
    
    // Slot Configurations collection:
    match /slotConfigurations/{configId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Tests collection (medical tests):
    match /tests/{testId} {
      allow read, list: if request.auth != null; // Authenticated users (patients/admins) can read/list tests.
      allow create, update, delete: if isAdmin(); // Admins manage tests.
    }

    // Bills collection:
    match /bills/{billId} {
      // Only admins can read, update, list, create, or delete bills.
      allow read, update, list, create, delete: if isAdmin();
    }

    // Clinic Configuration collection
    match /clinicConfiguration/globalClinicSettings {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Doctor Queue Status collection:
    match /doctorQueueStatus/{doctorId} {
      allow read: if request.auth != null;
      allow write: if isAdmin(); 
    }

    // --- Default Deny Rule ---
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
