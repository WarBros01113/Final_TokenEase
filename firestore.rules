
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check admin role
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection:
    match /users/{userId} {
      allow read, update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow create: if request.auth != null && request.auth.uid == userId;
      allow list: if isAdmin();
      allow delete: if isAdmin();
    }

    // User Settings collection:
    match /userSettings/{settingsDocId} {
      allow read, update: if request.auth != null && (settingsDocId == ("userPrefs_" + request.auth.uid) || isAdmin());
      allow create: if request.auth != null && (settingsDocId == ("userPrefs_" + request.auth.uid) || isAdmin());
      allow delete: if isAdmin();
    }

    // Appointments collection:
    match /appointments/{appointmentId} {
      allow create: if request.auth != null &&
                     ( (request.resource.data.patientId == request.auth.uid) || isAdmin() );
      allow read, update: if request.auth != null &&
                           ( (resource.data.patientId == request.auth.uid) || isAdmin() );
      allow list: if request.auth != null && (
        // A: Patient listing their OWN appointments (e.g., on their "My Appointments" tab)
        (
            request.query.limit <= 30 && // Add a reasonable limit for safety
            request.query.filters.size() > 0 &&
            request.query.filters[0][0] == 'patientId' &&
            request.query.filters[0][2] == request.auth.uid
        ) ||
        // B: ANY authenticated user checking slot availability for a specific doctor/date
        (
            request.query.keys().hasAll(['doctorId', 'date']) &&
            request.query.keys().size() == 2 // Ensures ONLY doctorId and date are being queried
        ) ||
        // C: Admin can list with more freedom
        isAdmin()
      );
      allow delete: if request.auth != null &&
                     (
                       (resource.data.patientId == request.auth.uid && resource.data.status == 'upcoming') ||
                       isAdmin()
                     );
    }

    // Doctors collection:
    match /doctors/{doctorId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Slot Configurations collection:
    match /slotConfigurations/{configId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Tests collection (medical tests):
    match /tests/{testId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Bills collection:
    match /bills/{billId} {
      allow read, update: if request.auth != null &&
                           ( (resource.data.patientId == request.auth.uid) || isAdmin() );
      allow list: if request.auth != null &&
                     (
                       (request.query.filters.size() > 0 && request.query.filters[0][0] == 'patientId' && request.query.filters[0][2] == request.auth.uid) ||
                       isAdmin()
                     );
      allow create, delete: if isAdmin();
    }

    // Clinic Configuration collection:
    match /clinicConfiguration/globalClinicSettings {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Doctor Queue Status collection:
    match /doctorQueueStatus/{doctorId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // --- Default Deny Rule ---
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
