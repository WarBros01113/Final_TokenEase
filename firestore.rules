
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check admin role
    function isAdmin() {
      // Check if user is authenticated and their document exists with role 'admin'
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the authenticated user matches the given userId
    function isUser(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Helper function to check if the query's filters contain a specific field and operator
    function queryHasFilter(fieldName, operator) {
      return request.query.filters.exists(f, f[0] == fieldName && f[1] == operator);
    }

    // Helper function to check if the query filters by a specific field and value
    function queryHasFilterWithValue(fieldName, operator, value) {
      return request.query.filters.exists(f, f[0] == fieldName && f[1] == operator && f[2] == value);
    }

    // Users collection:
    match /users/{userId} {
      allow read, update: if isUser(userId) || isAdmin();
      allow create: if isUser(userId); // User creates their own doc during sign up
      allow list: if isAdmin();
      allow delete: if isAdmin(); // Or a more complex rule for self-deletion if implemented
    }

    // User Settings collection:
    // Document ID is expected to be "userPrefs_" + userId.
    match /userSettings/{settingsDocId} {
      // Ensure the userId in the docId matches the authenticated user
      allow read, update: if (request.auth != null && settingsDocId == "userPrefs_" + request.auth.uid) || isAdmin();
      allow create: if (request.auth != null && settingsDocId == "userPrefs_" + request.auth.uid) || isAdmin();
      allow delete: if isAdmin();
    }

    // Appointments collection:
    match /appointments/{appointmentId} {
      allow create: if (request.auth != null && request.resource.data.patientId == request.auth.uid) || isAdmin();
      allow read, update: if (request.auth != null && resource.data.patientId == request.auth.uid) || isAdmin();
      // Allow patient to cancel (update status) their own upcoming/active appointments, or admin to do anything.
      // Deleting documents might be admin-only or a backend process for archival.
      // For this example, direct delete for patients on upcoming/active status.
      allow delete: if (request.auth != null && resource.data.patientId == request.auth.uid && (resource.data.status == 'upcoming' || resource.data.status == 'active')) || isAdmin();

      allow list: if request.auth != null && (
        isAdmin() ||
        ( // Scenario 1: Patient listing their OWN appointments
          queryHasFilterWithValue('patientId', '==', request.auth.uid) &&
          (request.query.limit == 0 || request.query.limit <= 100) // No limit from client means request.query.limit is 0
        ) ||
        ( // Scenario 2: ANY authenticated user checking slot availability for a specific doctor and date
          queryHasFilter('doctorId', '==') &&
          queryHasFilter('date', '==') &&
          request.query.limit > 0 && request.query.limit <= 300 // Client MUST provide a limit for this query type
        )
      );
    }

    // Doctors collection:
    match /doctors/{doctorId} {
      allow read, list: if request.auth != null; // Any authenticated user can read/list doctors for booking.
      allow create, update, delete: if isAdmin(); // Only admins manage doctors.
    }

    // Slot Configurations collection:
    match /slotConfigurations/{configId} {
      // Any authenticated user can list/read slot configurations for booking purposes.
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin(); // Admins manage slot configurations.
    }

    // Tests collection (medical tests):
    match /tests/{testId} {
      allow read, list: if request.auth != null; // Authenticated users (patients/admins) can read/list tests.
      allow create, update, delete: if isAdmin(); // Admins manage tests.
    }

    // Bills collection:
    match /bills/{billId} {
      allow read, update: if (request.auth != null && resource.data.patientId == request.auth.uid) || isAdmin();
      allow create, delete: if isAdmin(); // Creating/deleting bills is admin-only or system-driven.
      allow list: if request.auth != null && (
        isAdmin() ||
        ( // Patient listing their OWN bills
          queryHasFilterWithValue('patientId', '==', request.auth.uid) &&
          (request.query.limit == 0 || request.query.limit <= 100)
        )
      );
    }

    // Clinic Configuration collection (e.g., global settings):
    // Assumes a single document, e.g., "globalClinicSettings".
    match /clinicConfiguration/globalClinicSettings {
      allow read: if request.auth != null; // Any authenticated user can read clinic settings.
      allow write: if isAdmin(); // Only admins can change clinic settings (create/update/delete).
    }

    // Doctor Queue Status collection:
    match /doctorQueueStatus/{doctorId} {
      allow read: if request.auth != null; // Any authenticated user can read live queue status.
      allow write: if isAdmin(); // Or a more specific doctor role if you implement that
    }

    // --- Default Deny Rule ---
    // This rule ensures that any path not explicitly matched above is denied.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
