
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check admin role
    function isAdmin() {
      let userDocPath = /databases/$(database)/documents/users/$(request.auth.uid);
      return request.auth != null && exists(userDocPath) && get(userDocPath).data.role == 'admin';
    }

    // Users collection:
    match /users/{userId} {
      allow read, update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow create: if request.auth != null && request.auth.uid == userId;
      allow list: if isAdmin();
      allow delete: if isAdmin();
    }

    // User Settings collection:
    match /userSettings/{settingsDocId} {
      allow read, update: if request.auth != null && (settingsDocId == ("userPrefs_" + request.auth.uid) || isAdmin());
      allow create: if request.auth != null && (settingsDocId == ("userPrefs_" + request.auth.uid) || isAdmin());
      allow delete: if isAdmin();
    }

    // Appointments collection:
    match /appointments/{appointmentId} {
      allow create: if request.auth != null &&
                     ( (request.resource.data.patientId == request.auth.uid) || isAdmin() );
      allow read, update: if request.auth != null &&
                           ( (resource.data.patientId == request.auth.uid) || isAdmin() );
      
      allow list: if request.auth != null && (
        isAdmin() ||
        ( // Patient listing THEIR OWN appointments: checks if patientId is the first filter
          request.query.filters.size() > 0 &&
          request.query.filters[0][0] == 'patientId' &&
          request.query.filters[0][2] == request.auth.uid
        ) ||
        ( // ANY authenticated user checking slot availability for a doctor on a specific date
          request.query.filters.size() >= 2 &&
          (
            (request.query.filters[0][0] == 'doctorId' && request.query.filters[1][0] == 'date') ||
            (request.query.filters[0][0] == 'date' && request.query.filters[1][0] == 'doctorId')
          )
        )
      );

      allow delete: if request.auth != null &&
                     (
                       (resource.data.patientId == request.auth.uid && resource.data.status == 'upcoming') ||
                       isAdmin()
                     );
    }

    // Doctors collection:
    match /doctors/{doctorId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
    
    // Slot Configurations collection:
    match /slotConfigurations/{configId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Tests collection (medical tests):
    match /tests/{testId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Bills collection:
    match /bills/{billId} {
      allow read, update: if request.auth != null &&
                           ( (resource.data.patientId == request.auth.uid) || isAdmin() );
      allow list: if request.auth != null &&
                     (
                       (request.query.filters.size() > 0 && request.query.filters[0][0] == 'patientId' && request.query.filters[0][2] == request.auth.uid) ||
                       isAdmin()
                     );
      allow create, delete: if isAdmin();
    }

    // Clinic Configuration collection (e.g., global settings):
    match /clinicConfiguration/globalClinicSettings {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Doctor Queue Status collection:
    match /doctorQueueStatus/{doctorId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // --- Default Deny Rule ---
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
