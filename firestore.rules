
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check admin role
    function isAdmin() {
      // Check if user is authenticated and their document exists with role 'admin'
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection:
    match /users/{userId} {
      allow read, update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow create: if request.auth != null && request.auth.uid == userId;
      allow list: if isAdmin();
      allow delete: if isAdmin();
    }

    // User Settings collection:
    match /userSettings/{settingsDocId} {
      allow read, update: if request.auth != null && (settingsDocId == ("userPrefs_" + request.auth.uid) || isAdmin());
      allow create: if request.auth != null && (settingsDocId == ("userPrefs_" + request.auth.uid) || isAdmin());
      allow delete: if isAdmin();
    }

    // Appointments collection:
    match /appointments/{appointmentId} {
      allow create: if request.auth != null &&
                     ( (request.resource.data.patientId == request.auth.uid) || isAdmin() );
      allow read, update: if request.auth != null &&
                           ( (resource.data.patientId == request.auth.uid) || isAdmin() );
      allow delete: if request.auth != null &&
                     (
                       (resource.data.patientId == request.auth.uid && (resource.data.status == 'upcoming' || resource.data.status == 'active')) ||
                       isAdmin()
                     );

      allow list: if
        request.auth != null && ( // All list operations require authentication
          isAdmin() || // Admins can list anything
          (
            // Scenario 1: Patient listing THEIR OWN appointments
            // Query must filter by patientId == request.auth.uid
            // This query has one 'where' clause (patientId) and orderBy clauses.
            request.query.filters.size() == 1 &&
            request.query.filters[0][0] == 'patientId' &&
            request.query.filters[0][2] == request.auth.uid &&
            (request.query.limit == null || request.query.limit <= 100) // Allows no limit or a reasonable one for patient's own list.
          ) ||
          (
            // Scenario 2: ANY authenticated user checking slot availability
            // Query must filter by doctorId AND date, and have a specific limit.
            request.query.filters.size() == 2 && // Exactly two 'where' clauses
            request.query.limit == 300 &&       // Explicit limit from client must match
            ( // Order-independent check for doctorId and date filters
              (request.query.filters[0][0] == 'doctorId' && request.query.filters[1][0] == 'date') ||
              (request.query.filters[0][0] == 'date' && request.query.filters[1][0] == 'doctorId')
            )
          )
        );
    }

    // Doctors collection:
    match /doctors/{doctorId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Slot Configurations collection:
    match /slotConfigurations/{configId} {
      allow read, list: if request.auth != null; // Patients need to query these for available slots.
      allow create, update, delete: if isAdmin(); // Admins manage slot configurations.
    }

    // Tests collection (medical tests):
    match /tests/{testId} {
      allow read, list: if request.auth != null; // Authenticated users (patients/admins) can read/list tests.
      allow create, update, delete: if isAdmin(); // Admins manage tests.
    }

    // Bills collection:
    match /bills/{billId} {
      allow read, update: if request.auth != null &&
                           ( (resource.data.patientId == request.auth.uid) || isAdmin() );
      allow list: if request.auth != null && (
        ( // Patient listing their own bills - one filter on patientId
          request.query.filters.size() == 1 &&
          request.query.filters[0][0] == 'patientId' &&
          request.query.filters[0][2] == request.auth.uid &&
          (request.query.limit == null || request.query.limit <= 100) // Allows no limit or a reasonable one
        ) ||
        isAdmin()
      );
      allow create, delete: if isAdmin();
    }

    // Clinic Configuration collection (e.g., global settings):
    match /clinicConfiguration/globalClinicSettings {
      allow read: if request.auth != null; // Any authenticated user can read clinic settings.
      allow write: if isAdmin(); // Only admins can change clinic settings (create/update/delete).
    }

    // Doctor Queue Status collection:
    match /doctorQueueStatus/{doctorId} {
      allow read: if request.auth != null; // Any authenticated user can read live queue status.
      allow write: if isAdmin();
    }

    // --- Default Deny Rule ---
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
