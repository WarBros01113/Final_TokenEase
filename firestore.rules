
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check admin role
    function isAdmin() {
      // Check if user is authenticated and their document exists with role 'admin'
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection:
    match /users/{userId} {
      allow read, update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow create: if request.auth != null && request.auth.uid == userId;
      allow list: if isAdmin();
      allow delete: if isAdmin();
    }

    // User Settings collection:
    match /userSettings/{settingsDocId} {
      allow read, update: if request.auth != null && (settingsDocId == ("userPrefs_" + request.auth.uid) || isAdmin());
      allow create: if request.auth != null && (settingsDocId == ("userPrefs_" + request.auth.uid) || isAdmin());
      allow delete: if isAdmin();
    }

    // Appointments collection:
    match /appointments/{appointmentId} {
      allow create: if request.auth != null &&
                     ( (request.resource.data.patientId == request.auth.uid) || isAdmin() );
      // Patients can read/update their own appointments. Admins can read/update any appointment.
      allow read, update: if request.auth != null &&
                           ( (resource.data.patientId == request.auth.uid) || isAdmin() );

      allow list: if request.auth != null && (
        ( // Patient listing their OWN appointments (filtered by patientId).
          // This rule requires the query to explicitly filter for patientId equal to the user's UID.
          // Example client query: query(collection(db, "appointments"), where("patientId", "==", user.uid))
          request.query.resource == null && // Ensure it's a query, not a direct doc read disguised as list
          request.query.filters.size() > 0 &&
          request.query.filters[0][0] == 'patientId' && 
          request.query.filters[0][2] == request.auth.uid &&
          request.query.limit <= 100 // Good practice to limit reads
        ) ||
        ( // ANY authenticated user checking slot availability for a specific doctor and date
          request.query.keys().hasAll(['doctorId', 'date']) &&
          request.query.limit <= 300 // Ensure the query is reasonably limited (e.g., max appointments for a doctor on one day)
        ) ||
        isAdmin() // Admins can list all
      );

      // Patients can "cancel" (update status) their own upcoming/active appointments. Admins can delete any.
      // Actual deletion is admin-only. Patients modify status.
      allow delete: if isAdmin();
    }

    // Doctors collection:
    match /doctors/{doctorId} {
      allow read, list: if request.auth != null; // Any authenticated user can read/list doctors for booking.
      allow create, update, delete: if isAdmin(); // Only admins manage doctors.
    }

    // Slot Configurations collection:
    match /slotConfigurations/{configId} {
      // Any authenticated user can list/read slot configurations for booking purposes.
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin(); // Admins manage slot configurations.
    }

    // Tests collection (medical tests):
    match /tests/{testId} {
      allow read, list: if request.auth != null; // Authenticated users (patients/admins) can read/list tests.
      allow create, update, delete: if isAdmin(); // Admins manage tests.
    }

    // Bills collection:
    match /bills/{billId} {
      allow read, update: if request.auth != null &&
                           ( (resource.data.patientId == request.auth.uid) || isAdmin() );
      allow list: if request.auth != null && (
        ( // Patient listing their own bills
          request.query.resource == null &&
          request.query.filters.size() > 0 &&
          request.query.filters[0][0] == 'patientId' &&
          request.query.filters[0][2] == request.auth.uid &&
          request.query.limit <= 100
        ) ||
        isAdmin()
      );
      // Creating/deleting bills is admin-only or system-driven.
      allow create, delete: if isAdmin();
    }

    // Clinic Configuration collection (e.g., global settings):
    match /clinicConfiguration/globalClinicSettings {
      allow read: if request.auth != null; // Any authenticated user can read clinic settings.
      allow write: if isAdmin(); // Only admins can change clinic settings (create/update/delete).
    }

    // Doctor Queue Status collection:
    match /doctorQueueStatus/{doctorId} {
      allow read: if request.auth != null; // Any authenticated user can read live queue status.
      // Writing to queue status should be restricted (e.g., admins or specific doctor role).
      allow write: if isAdmin();
    }

    // --- Default Deny Rule ---
    // This rule ensures that any path not explicitly matched above is denied.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
