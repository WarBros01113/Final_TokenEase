
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function hasFilter(filters, fieldName) {
      return filters.filter(f => f.get("field").get("fieldPath") == fieldName).size() == 1;
    }

    function isUserCheckingSlotTokenCount() {
      let filters = request.query.getRules().get("filters");
      return request.auth != null &&
             filters.size() == 4 && // Expecting exactly these 4 filters
             hasFilter(filters, "doctorId") &&
             hasFilter(filters, "date") &&
             hasFilter(filters, "appointmentTime") &&
             hasFilter(filters, "slotConfigId") &&
             (request.query.limit == null || request.query.limit <= 50); // Limit for counting, 50 is generous
    }

    // Users collection
    match /users/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId); // User creates their own doc
      allow list: if isAdmin();
      allow delete: if isAdmin();
    }

    // User Settings collection
    match /userSettings/{settingsDocId} {
      function isOwnerOfSettings() {
        return request.auth != null && settingsDocId == "userPrefs_" + request.auth.uid;
      }
      allow read, update, create: if isOwnerOfSettings() || isAdmin();
      allow delete: if isAdmin();
    }

    // Doctors collection
    match /doctors/{doctorId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Slot Configurations collection
    match /slotConfigurations/{configId} {
      allow read, list: if request.auth != null; // Any auth user can list for booking
      allow create, update, delete: if isAdmin();
    }

    // Tests collection
    match /tests/{testId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Bills collection
    match /bills/{billId} {
      // Patients can read their own bills, or admins can read any.
      allow read: if (resource.data.patientId == request.auth.uid) || isAdmin();
      // Patients can update their own bills (e.g. payment status), or admins can update any.
      allow update: if (resource.data.patientId == request.auth.uid) || isAdmin();

      allow list: if (
                      // Patient listing their own bills
                      request.query.getRules().get("filters").size() > 0 &&
                      request.query.getRules().get("filters")[0].get("field").get("fieldPath") == "patientId" &&
                      request.query.getRules().get("filters")[0].get("value") == request.auth.uid &&
                      (request.query.limit == null || request.query.limit <= 100)
                     ) || isAdmin();
      allow create, delete: if isAdmin();
    }

    // Clinic Configuration
    match /clinicConfiguration/globalClinicSettings {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Doctor Queue Status
    match /doctorQueueStatus/{doctorId} {
      allow read: if request.auth != null;
      allow write: if isAdmin(); // Only admins can update live queue status.
    }

    // Appointments collection
    match /appointments/{appointmentId} {
      allow create: if (request.resource.data.patientId == request.auth.uid) || isAdmin();

      // Allows any authenticated user to read appointment data if they can list/get it.
      // Relies on list rules to prevent unauthorized listing.
      allow read: if request.auth != null;

      allow update: if (resource.data.patientId == request.auth.uid) || isAdmin(); // Patient can update (e.g. cancel), Admin can update any.

      allow list: if request.auth != null && (
                    ( // Scenario 1: Patient listing THEIR OWN appointments.
                        request.query.getRules().get("filters").size() > 0 &&
                        request.query.getRules().get("filters")[0].get("field").get("fieldPath") == "patientId" &&
                        request.query.getRules().get("filters")[0].get("value") == request.auth.uid &&
                        (request.query.limit == null || request.query.limit <= 100)
                    ) ||
                    ( // Scenario 2: ANY authenticated user checking slot availability.
                        request.query.getRules().get("filters").size() == 2 &&
                        (
                            (hasFilter(request.query.getRules().get("filters"), "doctorId") && hasFilter(request.query.getRules().get("filters"), "date"))
                        ) &&
                        request.query.limit == 300
                    ) ||
                    isUserCheckingSlotTokenCount() || // Scenario 3: Patient counting slots for token generation
                    isAdmin() // Admins can list all without these specific constraints.
                  );

      allow delete: if (resource.data.patientId == request.auth.uid && (resource.data.status == 'upcoming' || resource.data.status == 'active')) || isAdmin();
    }

    // Default Deny for any path not explicitly matched
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
