
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId); // User creates their own doc
      allow list: if isAdmin();
      allow delete: if isAdmin();
    }

    // User Settings collection
    match /userSettings/{settingsDocId} {
      function isOwnerOfSettings() {
        return request.auth != null && settingsDocId == "userPrefs_" + request.auth.uid;
      }
      allow read, update, create: if isOwnerOfSettings() || isAdmin();
      allow delete: if isAdmin();
    }

    // Doctors collection
    match /doctors/{doctorId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Slot Configurations collection
    match /slotConfigurations/{configId} {
      allow read, list: if request.auth != null; // Any auth user can list for booking
      allow create, update, delete: if isAdmin();
    }

    // Tests collection
    match /tests/{testId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Bills collection
    match /bills/{billId} {
      allow read, update: if isAdmin(); // Only admins can manage bills
      allow list: if isAdmin();
      allow create, delete: if isAdmin();
    }

    // Clinic Configuration
    match /clinicConfiguration/globalClinicSettings {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Doctor Queue Status
    match /doctorQueueStatus/{doctorId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Appointments collection
    match /appointments/{appointmentId} {
      allow create: if (request.resource.data.patientId == request.auth.uid) || isAdmin();

      allow read: if request.auth != null; 

      allow update: if (resource.data.patientId == request.auth.uid) || isAdmin();

      allow list: if request.auth != null && (
                    ( // Scenario 1: Patient listing THEIR OWN appointments.
                        request.query.getRules().get("filters").size() > 0 &&
                        request.query.getRules().get("filters")[0].get("field").get("fieldPath") == "patientId" &&
                        request.query.getRules().get("filters")[0].get("value") == request.auth.uid &&
                        (request.query.limit == null || request.query.limit <= 100)
                    ) ||
                    ( // Scenario 2: ANY authenticated user checking slot availability (booking page).
                        request.query.getRules().get("filters").size() == 2 &&
                        (
                            (request.query.getRules().get("filters")[0].get("field").get("fieldPath") == "doctorId" && request.query.getRules().get("filters")[1].get("field").get("fieldPath") == "date") ||
                            (request.query.getRules().get("filters")[0].get("field").get("fieldPath") == "date" && request.query.getRules().get("filters")[1].get("field").get("fieldPath") == "doctorId")
                        ) &&
                        request.query.limit == 300
                    ) ||
                    ( // Scenario 3: Authenticated user checking slot token count (booking page).
                      request.query.getRules().get("filters").size() == 4 && // Expects doctorId, date, appointmentTime, slotConfigId
                      // This relies on the client sending these 4 specific filters for this operation.
                      // A more complex rule could check each fieldPath if needed, but size + limit offers good protection.
                      (request.query.limit == null || request.query.limit <= 50) // Limit for token counting query
                    ) ||
                    isAdmin() // Admins can list all without these specific constraints.
                  );

      allow delete: if (resource.data.patientId == request.auth.uid && (resource.data.status == 'upcoming' || resource.data.status == 'active')) || isAdmin();
    }

    // Default Deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

    