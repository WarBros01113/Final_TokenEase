rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check admin role
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the query is a patient listing their own appointments
    function isPatientListingOwnAppointments() {
      // Check for a filter where patientId == request.auth.uid
      // Ensure the query is limited to a reasonable number for performance/security
      return request.query.filters.filter(f, f[0] == 'patientId' && f[1] == '==' && f[2] == request.auth.uid).size() == 1 &&
             (request.query.limit == null || request.query.limit <= 100);
    }

    // Helper function to check if the query is for slot availability
    function isCheckingSlotAvailability() {
      // Check for exactly two filters: one on 'doctorId' and one on 'date'
      // The client query uses limit(300)
      return request.query.filters.size() == 2 &&
             request.query.filters.map(f, f[0]).hasAll(['doctorId', 'date']) &&
             request.query.limit == 300; // Client query uses limit(300)
    }

    // Users collection:
    match /users/{userId} {
      allow read, update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow create: if request.auth != null && request.auth.uid == userId;
      allow list: if isAdmin();
      allow delete: if isAdmin();
    }

    // User Settings collection:
    match /userSettings/{settingsDocId} {
      allow read, update: if request.auth != null && (settingsDocId == ("userPrefs_" + request.auth.uid) || isAdmin());
      allow create: if request.auth != null && (settingsDocId == ("userPrefs_" + request.auth.uid) || isAdmin());
      allow delete: if isAdmin();
    }

    // Appointments collection:
    match /appointments/{appointmentId} {
      allow create: if request.auth != null &&
                     ( (request.resource.data.patientId == request.auth.uid) || isAdmin() );
      allow read, update: if request.auth != null &&
                           ( (resource.data.patientId == request.auth.uid) || isAdmin() );

      allow list: if request.auth != null && (
        isAdmin() || // Admins can list all
        isPatientListingOwnAppointments() || // Patients can list their own appointments
        isCheckingSlotAvailability() // Any authenticated user can check slot availability with specific filters
      );

      allow delete: if request.auth != null &&
                     (
                       (resource.data.patientId == request.auth.uid && (resource.data.status == 'upcoming' || resource.data.status == 'active')) ||
                       isAdmin()
                     );
    }

    // Doctors collection:
    match /doctors/{doctorId} {
      allow read, list: if request.auth != null; // Any authenticated user can read/list doctors for booking.
      allow create, update, delete: if isAdmin(); // Only admins manage doctors.
    }

    // Slot Configurations collection:
    match /slotConfigurations/{configId} {
      allow read, list: if request.auth != null; // Patients need to query these for available slots.
      allow create, update, delete: if isAdmin(); // Admins manage slot configurations.
    }

    // Tests collection (medical tests):
    match /tests/{testId} {
      allow read, list: if request.auth != null; // Authenticated users (patients/admins) can read/list tests.
      allow create, update, delete: if isAdmin(); // Admins manage tests.
    }

    // Bills collection:
    match /bills/{billId} {
      allow read, update: if request.auth != null &&
                           ( (resource.data.patientId == request.auth.uid) || isAdmin() );
      allow list: if request.auth != null && (
        ( // Patient listing their OWN bills (similar to isPatientListingOwnAppointments)
          request.query.filters.filter(f, f[0] == 'patientId' && f[1] == '==' && f[2] == request.auth.uid).size() == 1 &&
          (request.query.limit == null || request.query.limit <= 100)
        ) ||
        isAdmin()
      );
      allow create, delete: if isAdmin();
    }

    // Clinic Configuration collection
    match /clinicConfiguration/globalClinicSettings {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Doctor Queue Status collection:
    match /doctorQueueStatus/{doctorId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // --- Default Deny Rule ---
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
